package com.zensar.controller;

import java.util.List;
import java.util.Set;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.authentication.AuthenticationManager;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.zensar.dto.LoginRequest;
import com.zensar.dto.UserResponseTkn;
import com.zensar.entity.Product;
import com.zensar.service.ProductService;
import com.zensar.service.UserService;
import com.zensar.util.JwtUtil;

@RestController
@CrossOrigin("*")
public class ProductController {
	private static Logger logger = LoggerFactory.getLogger(ProductController.class);
	
	@Autowired
	private ProductService service;
	
	private AuthenticationManager authenticationManager;

	private JwtUtil jwtUtil;

	private UserService userService;

	@PostMapping("/save")
	public ResponseEntity<Product> createProduct(@RequestBody Product product) {
		Product product1 = service.createProduct(product);
		return new ResponseEntity<>(product1, HttpStatus.OK);
	}

	@GetMapping("/getAll")
	public ResponseEntity<List<Product>> getAllProd() {
		List<Product> prod = service.getAllProduct();
		logger.info("get all product");
	return new ResponseEntity<List<Product>>(prod, HttpStatus.OK);

	}

	@GetMapping("/getOneId/{id}")
	public ResponseEntity<Product> getOneProd(@PathVariable("id") Long id) {
		Product prod = service.getOneProduct(id);
		return new ResponseEntity<Product>(prod, HttpStatus.OK);

	}

	@GetMapping("/getProdByName/{catName}")
	public ResponseEntity<Set<Product>> getProductByName(@PathVariable("catName") String catName) {
		logger.info("get product by category");
		Set<Product> product = service.getByName(catName).get();
		return new ResponseEntity<Set<Product>>(product, HttpStatus.OK);
	}
	
	@GetMapping("/getProdByCat/{catName}")
	public ResponseEntity<Set<Product>> getProductByCat(@PathVariable("catName") String catName) {
		logger.info("get product by category");
		Set<Product> product = service.getProdByCat(catName);
		return new ResponseEntity<Set<Product>>(product, HttpStatus.OK);
	}
	@PostMapping("/login")
	public ResponseEntity<UserResponseTkn> loginUser(@RequestBody LoginRequest loginRequest) {
		authenticationManager.authenticate(
				new UsernamePasswordAuthenticationToken(loginRequest.getUsername(), loginRequest.getPassword()));
		String token = jwtUtil.generateToken(loginRequest.getUsername());
		return ResponseEntity.ok(new UserResponseTkn(token, "GENERATED BY NISUM"));
	}
}
