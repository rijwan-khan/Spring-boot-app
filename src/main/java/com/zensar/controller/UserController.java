package com.zensar.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.zensar.dto.LoginRequest;
import com.zensar.dto.UserRequest;
import com.zensar.dto.UserResponse;
import com.zensar.dto.UserResponseTkn;
import com.zensar.exception.UserNotFoundException;
import com.zensar.service.UserService;
import com.zensar.util.JwtUtil;

@RestController
@RequestMapping("api")
public class UserController {

	private AuthenticationManager authenticationManager;

	private JwtUtil jwtUtil;

	private UserService userService;

	@Autowired
	public UserController(UserService userService, AuthenticationManager authenticationManager, JwtUtil jwtUtil) {
		this.userService = userService;
		this.authenticationManager = authenticationManager;
		this.jwtUtil = jwtUtil;
	}

	@PostMapping("/users")
	public ResponseEntity<UserResponse> createUser(@RequestBody UserRequest userRequest) {
		return ResponseEntity.ok(userService.createUser(userRequest));
	}

	@GetMapping("/users")
	public ResponseEntity<List<UserResponse>> getUsers() {
		return ResponseEntity.ok(userService.getUsers());
	}

	@GetMapping("/users/{id}")
	public ResponseEntity<UserResponse> getUserById(@PathVariable("id") Long id) throws UserNotFoundException {
		return ResponseEntity.ok(userService.getUserById(id));
	}

	@PutMapping("/users/{id}")
	public ResponseEntity<UserResponse> updateUser(@RequestBody UserRequest userRequest, @PathVariable("id") Long id)
			throws UserNotFoundException {
		return ResponseEntity.ok(userService.updateUser(userRequest, id));
	}

	@DeleteMapping("/users/{id}")
	public ResponseEntity<Object> deleteUserById(@PathVariable("id") Long id) throws UserNotFoundException {
		userService.deleteUserById(id);
		return ResponseEntity.ok("User Deleted");
	}

	@GetMapping("/users/byusername/{username}")
	public ResponseEntity<UserResponse> getUserByUsername(@PathVariable("username") String username)
			throws UserNotFoundException {
		return ResponseEntity.ok(userService.getUserByUsername(username));
	}

	@GetMapping("/welcome")
	public ResponseEntity<String> getWelcomeMsg() {
		return ResponseEntity.ok("Welcome To ZENSAR");
	}

	@PostMapping("/login")
	public ResponseEntity<UserResponseTkn> loginUser(@RequestBody LoginRequest loginRequest) {
		authenticationManager.authenticate(
				new UsernamePasswordAuthenticationToken(loginRequest.getUsername(), loginRequest.getPassword()));
		String token = jwtUtil.generateToken(loginRequest.getUsername());
		return ResponseEntity.ok(new UserResponseTkn(token, "GENERATED BY ZENSAR"));
	}
}
